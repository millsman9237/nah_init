#!/bin/bash

# Spinning wait animation
spinner() {
    local i sp n
    PID=$!
    i=1
    sp="/-\|"
    n=${#sp}
    echo -n ' '
    while [ -d /proc/$PID ]
    do
        printf "%s\b" "${sp:i++%n:1}"
    done
}

# Set static IP
static() {
    nmcli con mod "Wired connection 1" \
    ipv4.addresses $ip"/24" \
    ipv4.gateway "192.168.1.1" \
    ipv4.dns "1.1.1.1,8.8.8.8" \
    ipv4.method "manual"
}





# Check for installed packages
_isInstalled() {
    package="$1";
    check="$(sudo pacman -Qs --color always "${package}" | grep "local" | grep "${package} ")";
    if [ -n "${check}" ] ; then
        echo 0; #'0' means 'true' in Bash
        return; #true
    fi;
    echo 1; #'1' means 'false' in Bash
    return; #false
}

# `_install <pkg>`
_install() {
    package="$1";

    # If the package IS installed:
    if [[ $(_isInstalled "${package}") == 0 ]]; then
        echo "${package} is already installed.";
        return;
    fi;

    # If the package is NOT installed:
    if [[ $(_isInstalled "${package}") == 1 ]]; then
        sudo pacman -S "${package}";
    fi;
}

# `_installMany <pkg1> <pkg2> ...`
# Works the same as `_install` above,
#     but you can pass more than one package to this one.
_installMany() {
    # The packages that are not installed will be added to this array.
    toInstall=();

    for pkg; do
        # If the package IS installed, skip it.
        if [[ $(_isInstalled "${pkg}") == 0 ]]; then
            echo "${pkg} is already installed.";
            continue;
        fi;

        #Otherwise, add it to the list of packages to install.
        toInstall+=("${pkg}");
    done;

    # If no packages were added to the "${toInstall[@]}" array,
    #     don't do anything and stop this function.
    if [[ "${toInstall[@]}" == "" ]] ; then
        echo "All packages are already installed.";
        return;
    fi;

    # Otherwise, install all the packages that have been added to the "${toInstall[@]}" array.
    printf"Packages not installed:\n%s\n" "${toInstall[@]}";
    sudo pacman -S "${toInstall[@]}";
}

package="lshw";
_install "${package}";

packages=("lshw" "inkscape");
_installMany "${packages[@]}";
#Or,
_installMany "lshw" "inkscape" 






# Calculates system settings from user input
x=0
while [ $x -lt 1 ]
    do
        # Ask user for workstation number
        read -p "Enter workstation number: " wn
        hn="workstation-"$wn
        ip="192.168.1."$(( wn + 10 - 1 )) # Adds 10 if workstation number exeeds 10
        clear
        x=$(( $x + 1 ))   # Ends while loop
    done

echo "Generated workstation settings: "
echo "  IP Addrress -> "$ip
echo "  Hostname    -> "$hn
echo
echo
echo
read -p "Use these settings to initialize this workstation (y/n)? " yn
if [ "$yn" != "${yn#[Yy]}" ]; then
    # Set system hostname
    echo $hn > /etc/hostname
    sleep 2 &
    printf 'Setting hostname '
    spinner
    printf 'done\n'
    # Set static ip address
    static
    sleep 2 &
    printf 'Applying network settings '
    spinner
    printf 'done\n'
    # Check if programs are installed
    # Add aliases to .bashrc 
    echo " " >> /home/user/.bashrc
    echo "# Auto generated by NSI" >> /home/user/.bashrc
    echo "alias vim='nvim'" >> /home/user/.bashrc
    echo "alias ls='lsd'" >> /home/user/.bashrc
    echo "alias la='lsd -lah'" >> /home/user/.bashrc
else
    echo no
fi
